// @flow
/* eslint-disable no-undef, no-unused-vars */

declare export var pipe: $ComposeReverse

type PipeFn = typeof pipe

type EmptyPipeWithFn = () => <V>(V) => V

type PipeWithFn<BindFn> = (<
  F1,
  F2,
  F3,
  F4,
  F5,
  F6,
  F7,
  F8,
  F9,
  F10,
  F11,
  F12,
  F13,
  F14,
  F15,
  F16
>(
  F1,
  F2,
  F3,
  F4,
  F5,
  F6,
  F7,
  F8,
  F9,
  F10,
  F11,
  F12,
  F13,
  F14,
  F15,
  F16
) => $Call<
  PipeFn,
  F1,
  $Call<BindFn, F2>,
  $Call<BindFn, F3>,
  $Call<BindFn, F4>,
  $Call<BindFn, F5>,
  $Call<BindFn, F6>,
  $Call<BindFn, F7>,
  $Call<BindFn, F8>,
  $Call<BindFn, F9>,
  $Call<BindFn, F10>,
  $Call<BindFn, F11>,
  $Call<BindFn, F12>,
  $Call<BindFn, F13>,
  $Call<BindFn, F14>,
  $Call<BindFn, F15>,
  $Call<BindFn, F16>
>) &
  (<F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15>(
    F1,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8,
    F9,
    F10,
    F11,
    F12,
    F13,
    F14,
    F15
  ) => $Call<
    PipeFn,
    F1,
    $Call<BindFn, F2>,
    $Call<BindFn, F3>,
    $Call<BindFn, F4>,
    $Call<BindFn, F5>,
    $Call<BindFn, F6>,
    $Call<BindFn, F7>,
    $Call<BindFn, F8>,
    $Call<BindFn, F9>,
    $Call<BindFn, F10>,
    $Call<BindFn, F11>,
    $Call<BindFn, F12>,
    $Call<BindFn, F13>,
    $Call<BindFn, F14>,
    $Call<BindFn, F15>
  >) &
  (<F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14>(
    F1,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8,
    F9,
    F10,
    F11,
    F12,
    F13,
    F14
  ) => $Call<
    PipeFn,
    F1,
    $Call<BindFn, F2>,
    $Call<BindFn, F3>,
    $Call<BindFn, F4>,
    $Call<BindFn, F5>,
    $Call<BindFn, F6>,
    $Call<BindFn, F7>,
    $Call<BindFn, F8>,
    $Call<BindFn, F9>,
    $Call<BindFn, F10>,
    $Call<BindFn, F11>,
    $Call<BindFn, F12>,
    $Call<BindFn, F13>,
    $Call<BindFn, F14>
  >) &
  (<F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13>(
    F1,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8,
    F9,
    F10,
    F11,
    F12,
    F13
  ) => $Call<
    PipeFn,
    F1,
    $Call<BindFn, F2>,
    $Call<BindFn, F3>,
    $Call<BindFn, F4>,
    $Call<BindFn, F5>,
    $Call<BindFn, F6>,
    $Call<BindFn, F7>,
    $Call<BindFn, F8>,
    $Call<BindFn, F9>,
    $Call<BindFn, F10>,
    $Call<BindFn, F11>,
    $Call<BindFn, F12>,
    $Call<BindFn, F13>
  >) &
  (<F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12>(
    F1,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8,
    F9,
    F10,
    F11,
    F12
  ) => $Call<
    PipeFn,
    F1,
    $Call<BindFn, F2>,
    $Call<BindFn, F3>,
    $Call<BindFn, F4>,
    $Call<BindFn, F5>,
    $Call<BindFn, F6>,
    $Call<BindFn, F7>,
    $Call<BindFn, F8>,
    $Call<BindFn, F9>,
    $Call<BindFn, F10>,
    $Call<BindFn, F11>,
    $Call<BindFn, F12>
  >) &
  (<F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11>(
    F1,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8,
    F9,
    F10,
    F11
  ) => $Call<
    PipeFn,
    F1,
    $Call<BindFn, F2>,
    $Call<BindFn, F3>,
    $Call<BindFn, F4>,
    $Call<BindFn, F5>,
    $Call<BindFn, F6>,
    $Call<BindFn, F7>,
    $Call<BindFn, F8>,
    $Call<BindFn, F9>,
    $Call<BindFn, F10>,
    $Call<BindFn, F11>
  >) &
  (<F1, F2, F3, F4, F5, F6, F7, F8, F9, F10>(
    F1,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8,
    F9,
    F10
  ) => $Call<
    PipeFn,
    F1,
    $Call<BindFn, F2>,
    $Call<BindFn, F3>,
    $Call<BindFn, F4>,
    $Call<BindFn, F5>,
    $Call<BindFn, F6>,
    $Call<BindFn, F7>,
    $Call<BindFn, F8>,
    $Call<BindFn, F9>,
    $Call<BindFn, F10>
  >) &
  (<F1, F2, F3, F4, F5, F6, F7, F8, F9>(
    F1,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8,
    F9
  ) => $Call<
    PipeFn,
    F1,
    $Call<BindFn, F2>,
    $Call<BindFn, F3>,
    $Call<BindFn, F4>,
    $Call<BindFn, F5>,
    $Call<BindFn, F6>,
    $Call<BindFn, F7>,
    $Call<BindFn, F8>,
    $Call<BindFn, F9>
  >) &
  (<F1, F2, F3, F4, F5, F6, F7, F8>(
    F1,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8
  ) => $Call<
    PipeFn,
    F1,
    $Call<BindFn, F2>,
    $Call<BindFn, F3>,
    $Call<BindFn, F4>,
    $Call<BindFn, F5>,
    $Call<BindFn, F6>,
    $Call<BindFn, F7>,
    $Call<BindFn, F8>
  >) &
  (<F1, F2, F3, F4, F5, F6, F7>(
    F1,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7
  ) => $Call<
    PipeFn,
    F1,
    $Call<BindFn, F2>,
    $Call<BindFn, F3>,
    $Call<BindFn, F4>,
    $Call<BindFn, F5>,
    $Call<BindFn, F6>,
    $Call<BindFn, F7>
  >) &
  (<F1, F2, F3, F4, F5, F6>(
    F1,
    F2,
    F3,
    F4,
    F5,
    F6
  ) => $Call<
    PipeFn,
    F1,
    $Call<BindFn, F2>,
    $Call<BindFn, F3>,
    $Call<BindFn, F4>,
    $Call<BindFn, F5>,
    $Call<BindFn, F6>
  >) &
  (<F1, F2, F3, F4, F5>(
    F1,
    F2,
    F3,
    F4,
    F5
  ) => $Call<
    PipeFn,
    F1,
    $Call<BindFn, F2>,
    $Call<BindFn, F3>,
    $Call<BindFn, F4>,
    $Call<BindFn, F5>
  >) &
  (<F1, F2, F3, F4>(
    F1,
    F2,
    F3,
    F4
  ) => $Call<
    PipeFn,
    F1,
    $Call<BindFn, F2>,
    $Call<BindFn, F3>,
    $Call<BindFn, F4>
  >) &
  (<F1, F2, F3>(
    F1,
    F2,
    F3
  ) => $Call<PipeFn, F1, $Call<BindFn, F2>, $Call<BindFn, F3>>) &
  (<F1, F2>(F1, F2) => $Call<PipeFn, F1, $Call<BindFn, F2>>) &
  (<F1>(F1) => $Call<PipeFn, F1>) &
  (() => <V>(V) => V)

declare export function pipeWith<BindFn>(BindFn): PipeWithFn<BindFn>
